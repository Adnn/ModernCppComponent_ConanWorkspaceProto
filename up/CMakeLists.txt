# CMake initialisation
cmake_minimum_required(VERSION 3.15)

# Setting the VERSION on root project() will populate CMAKE_PROJECT_VERSION
project(MyRepository
        VERSION "${BUILD_VERSION}")

# If this file exists, it was generated by Conan recipe
# to satisfy dependencies and provide CMake variables.
include(${CMAKE_CURRENT_BINARY_DIR}/cmakeuserconfig.cmake OPTIONAL)

# Common build settings
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 14)
endif()

# Include components
add_subdirectory(src)

# Multi-component package
# Generate the root config and version check in the build tree
configure_file(${PROJECT_SOURCE_DIR}/cmake/ComponentPackageRootConfig.cmake.in
               ${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake
               @ONLY)
if(PROJECT_VERSION)
    include(CMakePackageConfigHelpers)
    set(_version_file ${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake)
    write_basic_package_version_file(${_version_file}
        VERSION ${PROJECT_VERSION}
        COMPATIBILITY AnyNewerVersion)
endif()

# Install the root config file over to the install tree
install(FILES ${CMAKE_BINARY_DIR}/${PROJECT_NAME}Config.cmake
              ${_version_file}
        DESTINATION lib/cmake/${PROJECT_NAME})

set(${PROJECT_NAME}_FOUND ON PARENT_SCOPE)

function(register_source_package NAME)
  file(WRITE "${CMAKE_BINARY_DIR}/__pkg/${NAME}/${NAME}Config.cmake"
      "message(STATUS \"find_package(${NAME}) disabled: package targets are directly available in the build tree.\")"
    )
  set(${NAME}_DIR ${CMAKE_BINARY_DIR}/__pkg/${NAME} CACHE PATH "")
endfunction()

register_source_package(${PROJECT_NAME})
